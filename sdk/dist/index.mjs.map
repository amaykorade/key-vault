{"version":3,"file":"index.mjs","sources":["../index.js"],"sourcesContent":["/**\n * KeyVault SDK - Read-only access to your Key Vault keys and folders (with automatic token refresh)\n *\n * Usage:\n *   const kv = new KeyVault({ apiUrl, getToken, onAuthError });\n *   const keys = await kv.listKeys({ folderId, limit, offset });\n *   const key = await kv.getKey(keyId, { includeValue });\n *   const folders = await kv.listFolders({ projectId });\n *   const folder = await kv.getFolder(folderId);\n */\nexport default class KeyVault {\n  /**\n   * @param {Object} options\n   * @param {string} options.apiUrl - Base URL of the Key Vault API (e.g., https://yourdomain.com/api)\n   * @param {function} options.getToken - Async function that returns the latest JWT token\n   * @param {function} [options.onAuthError] - Optional async function called on 401 errors (e.g., to refresh token)\n   */\n  constructor({ apiUrl, getToken, onAuthError }) {\n    this.apiUrl = apiUrl.replace(/\\/$/, ''); // Remove trailing slash\n    this.getToken = getToken;\n    this.onAuthError = onAuthError;\n  }\n\n  async _fetchWithAuth(url, options = {}, retry = true) {\n    const token = await this.getToken();\n    let res = await fetch(url, {\n      ...options,\n      headers: {\n        ...(options.headers || {}),\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (res.status === 401 && retry) {\n      // Try to refresh token using refresh endpoint\n      const refreshRes = await fetch(`${this.apiUrl.replace(/\\/api$/, '')}/api/auth/refresh`, {\n        method: 'POST',\n        credentials: 'include', // send cookies\n      });\n      if (refreshRes.ok) {\n        const refreshData = await refreshRes.json();\n        if (refreshData.session?.token) {\n          // Update token source if possible\n          if (typeof this.setToken === 'function') {\n            await this.setToken(refreshData.session.token);\n          }\n          // Retry original request with new token\n          return this._fetchWithAuth(url, options, false);\n        }\n      }\n      // If refresh fails, call onAuthError if provided\n      if (this.onAuthError) {\n        await this.onAuthError();\n      }\n    }\n    return res;\n  }\n\n  /**\n   * List keys in a folder (paginated)\n   * @param {Object} params\n   * @param {string} params.folderId - Folder ID to list keys from\n   * @param {number} [params.limit=20] - Number of keys to return\n   * @param {number} [params.offset=0] - Number of keys to skip\n   * @returns {Promise<{ keys: Array, total: number, limit: number, offset: number }>}\n   */\n  async listKeys({ folderId, limit = 20, offset = 0 }) {\n    const url = `${this.apiUrl}/keys?folderId=${encodeURIComponent(folderId)}&limit=${limit}&offset=${offset}`;\n    const res = await this._fetchWithAuth(url);\n    const data = await res.json();\n    if (!res.ok || data.success === false) {\n      throw new Error(data.error || 'Failed to list keys');\n    }\n    return {\n      keys: data.keys,\n      total: data.total,\n      limit: data.limit,\n      offset: data.offset\n    };\n  }\n\n  /**\n   * Get a key by ID\n   * @param {string} keyId - The key's ID\n   * @param {Object} [options]\n   * @param {boolean} [options.includeValue=false] - If true, include the decrypted key value\n   * @returns {Promise<Object>} - The key object\n   */\n  async getKey(keyId, { includeValue = false } = {}) {\n    const url = `${this.apiUrl}/keys/${encodeURIComponent(keyId)}?includeValue=${includeValue}`;\n    const res = await this._fetchWithAuth(url);\n    const data = await res.json();\n    if (!res.ok || data.success === false) {\n      throw new Error(data.error || 'Failed to fetch key');\n    }\n    return data.key;\n  }\n\n  /**\n   * List all folders (projects and subfolders)\n   * @param {Object} [params]\n   * @param {string} [params.projectId] - If provided, only return folders within this project\n   * @returns {Promise<{ folders: Array }>} - Array of folders with hierarchical structure\n   */\n  async listFolders({ projectId } = {}) {\n    const url = projectId \n      ? `${this.apiUrl}/folders/tree?projectId=${encodeURIComponent(projectId)}`\n      : `${this.apiUrl}/folders/tree`;\n    const res = await this._fetchWithAuth(url);\n    const data = await res.json();\n    if (!res.ok) {\n      throw new Error(data.message || 'Failed to list folders');\n    }\n    return {\n      folders: data.folders || []\n    };\n  }\n\n  /**\n   * Get a specific folder with its contents\n   * @param {string} folderId - The folder's ID\n   * @returns {Promise<Object>} - The folder object with keys and subfolders\n   */\n  async getFolder(folderId) {\n    const url = `${this.apiUrl}/folders/${encodeURIComponent(folderId)}`;\n    const res = await this._fetchWithAuth(url);\n    const data = await res.json();\n    if (!res.ok) {\n      throw new Error(data.message || 'Failed to fetch folder');\n    }\n    return {\n      folder: data.folder,\n      keys: data.keys || []\n    };\n  }\n\n  /**\n   * List only root folders (projects)\n   * @returns {Promise<{ folders: Array }>} - Array of root folders\n   */\n  async listProjects() {\n    const url = `${this.apiUrl}/folders`;\n    const res = await this._fetchWithAuth(url);\n    const data = await res.json();\n    if (!res.ok) {\n      throw new Error(data.message || 'Failed to list projects');\n    }\n    return {\n      folders: data.folders || []\n    };\n  }\n\n  /**\n   * Get a key by name from a specific folder\n   * @param {string} folderId - The folder's ID\n   * @param {string} keyName - The key's name\n   * @param {Object} [options]\n   * @param {boolean} [options.includeValue=false] - If true, include the decrypted key value\n   * @returns {Promise<Object|null>} - The key object or null if not found\n   */\n  async getKeyByName(folderId, keyName, { includeValue = false } = {}) {\n    const { keys } = await this.listKeys({ folderId, limit: 100 });\n    const key = keys.find(k => k.name === keyName);\n    if (!key) {\n      return null;\n    }\n    return this.getKey(key.id, { includeValue });\n  }\n\n  /**\n   * Search for keys across all folders\n   * @param {Object} params\n   * @param {string} params.search - Search term\n   * @param {string} [params.type] - Filter by key type\n   * @param {boolean} [params.favorite] - Filter by favorite status\n   * @param {number} [params.limit=20] - Number of keys to return\n   * @param {number} [params.offset=0] - Number of keys to skip\n   * @returns {Promise<{ keys: Array, total: number, limit: number, offset: number }>}\n   */\n  async searchKeys({ search, type, favorite, limit = 20, offset = 0 }) {\n    const params = new URLSearchParams({\n      search: search,\n      limit: limit.toString(),\n      offset: offset.toString()\n    });\n    \n    if (type) params.append('type', type);\n    if (favorite !== undefined) params.append('favorite', favorite.toString());\n    \n    const url = `${this.apiUrl}/keys?${params.toString()}`;\n    const res = await this._fetchWithAuth(url);\n    const data = await res.json();\n    if (!res.ok) {\n      throw new Error(data.message || 'Failed to search keys');\n    }\n    return {\n      keys: data.keys || [],\n      total: data.total || 0,\n      limit: data.limit || limit,\n      offset: data.offset || offset\n    };\n  }\n\n  /**\n   * Get folder statistics\n   * @returns {Promise<Object>} - Statistics about keys and folders\n   */\n  async getStats() {\n    const url = `${this.apiUrl}/stats`;\n    const res = await this._fetchWithAuth(url);\n    const data = await res.json();\n    if (!res.ok) {\n      throw new Error(data.message || 'Failed to fetch stats');\n    }\n    return data.stats || {};\n  }\n} "],"names":[],"mappings":"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"}