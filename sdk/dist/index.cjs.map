{"version":3,"file":"index.cjs","sources":["../index.js"],"sourcesContent":["/**\n * KeyVault SDK - Read-only access to your Key Vault keys and folders (with automatic token refresh)\n *\n * Usage:\n *   const kv = new KeyVault({ apiUrl, getToken, onAuthError });\n *   const keys = await kv.listKeys({ folderId, limit, offset });\n *   const key = await kv.getKey(keyId, { includeValue });\n *   const folders = await kv.listFolders({ projectId });\n *   const folder = await kv.getFolder(folderId);\n */\nexport default class KeyVault {\n  /**\n   * @param {Object} options\n   * @param {string} options.apiUrl - Base URL of the Key Vault API (e.g., https://yourdomain.com/api)\n   * @param {function} options.getToken - Async function that returns the latest JWT token\n   * @param {function} [options.onAuthError] - Optional async function called on 401 errors (e.g., to refresh token)\n   */\n  constructor({ apiUrl, getToken, onAuthError }) {\n    this.apiUrl = apiUrl.replace(/\\/$/, ''); // Remove trailing slash\n    this.getToken = getToken;\n    this.onAuthError = onAuthError;\n    this.permissions = null; // Cache for user permissions\n  }\n\n  async _fetchWithAuth(url, options = {}, retry = true) {\n    const token = await this.getToken();\n    let res = await fetch(url, {\n      ...options,\n      headers: {\n        ...(options.headers || {}),\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (res.status === 401 && retry) {\n      // Try to refresh token using refresh endpoint\n      const refreshRes = await fetch(`${this.apiUrl.replace(/\\/api$/, '')}/api/auth/refresh`, {\n        method: 'POST',\n        credentials: 'include', // send cookies\n      });\n      if (refreshRes.ok) {\n        const refreshData = await refreshRes.json();\n        if (refreshData.session?.token) {\n          // Update token source if possible\n          if (typeof this.setToken === 'function') {\n            await this.setToken(refreshData.session.token);\n          }\n          // Retry original request with new token\n          return this._fetchWithAuth(url, options, false);\n        }\n      }\n      // If refresh fails, call onAuthError if provided\n      if (this.onAuthError) {\n        await this.onAuthError();\n      }\n    }\n    return res;\n  }\n\n  /**\n   * List keys in a folder (paginated)\n   * @param {Object} params\n   * @param {string} params.folderId - Folder ID to list keys from\n   * @param {number} [params.limit=20] - Number of keys to return\n   * @param {number} [params.offset=0] - Number of keys to skip\n   * @returns {Promise<{ keys: Array, total: number, limit: number, offset: number }>}\n   */\n  async listKeys({ folderId, limit = 20, offset = 0 }) {\n    const url = `${this.apiUrl}/keys?folderId=${encodeURIComponent(folderId)}&limit=${limit}&offset=${offset}`;\n    const res = await this._fetchWithAuth(url);\n    const data = await res.json();\n    if (!res.ok || data.success === false) {\n      throw new Error(data.error || 'Failed to list keys');\n    }\n    return {\n      keys: data.keys,\n      total: data.total,\n      limit: data.limit,\n      offset: data.offset\n    };\n  }\n\n  /**\n   * Get a key by ID\n   * @param {string} keyId - The key's ID\n   * @param {Object} [options]\n   * @param {boolean} [options.includeValue=false] - If true, include the decrypted key value\n   * @returns {Promise<Object>} - The key object\n   */\n  async getKey(keyId, { includeValue = false } = {}) {\n    const url = `${this.apiUrl}/keys/${encodeURIComponent(keyId)}?includeValue=${includeValue}`;\n    const res = await this._fetchWithAuth(url);\n    const data = await res.json();\n    if (!res.ok || data.success === false) {\n      throw new Error(data.error || 'Failed to fetch key');\n    }\n    return data.key;\n  }\n\n  /**\n   * List all folders (projects and subfolders)\n   * @param {Object} [params]\n   * @param {string} [params.projectId] - If provided, only return folders within this project\n   * @returns {Promise<{ folders: Array }>} - Array of folders with hierarchical structure\n   */\n  async listFolders({ projectId } = {}) {\n    const url = projectId \n      ? `${this.apiUrl}/folders/tree?projectId=${encodeURIComponent(projectId)}`\n      : `${this.apiUrl}/folders/tree`;\n    const res = await this._fetchWithAuth(url);\n    const data = await res.json();\n    if (!res.ok) {\n      throw new Error(data.message || 'Failed to list folders');\n    }\n    return {\n      folders: data.folders || []\n    };\n  }\n\n  /**\n   * Get a specific folder with its contents\n   * @param {string} folderId - The folder's ID\n   * @returns {Promise<Object>} - The folder object with keys and subfolders\n   */\n  async getFolder(folderId) {\n    const url = `${this.apiUrl}/folders/${encodeURIComponent(folderId)}`;\n    const res = await this._fetchWithAuth(url);\n    const data = await res.json();\n    if (!res.ok) {\n      throw new Error(data.message || 'Failed to fetch folder');\n    }\n    return {\n      folder: data.folder,\n      keys: data.keys || []\n    };\n  }\n\n  /**\n   * List only root folders (projects)\n   * @returns {Promise<{ folders: Array }>} - Array of root folders\n   */\n  async listProjects() {\n    const url = `${this.apiUrl}/folders`;\n    const res = await this._fetchWithAuth(url);\n    const data = await res.json();\n    if (!res.ok) {\n      throw new Error(data.message || 'Failed to list projects');\n    }\n    return {\n      folders: data.folders || []\n    };\n  }\n\n  /**\n   * Get a key by name from a specific folder\n   * @param {string} folderId - The folder's ID\n   * @param {string} keyName - The key's name\n   * @param {Object} [options]\n   * @param {boolean} [options.includeValue=false] - If true, include the decrypted key value\n   * @returns {Promise<Object|null>} - The key object or null if not found\n   */\n  async getKeyByName(folderId, keyName, { includeValue = false } = {}) {\n    const { keys } = await this.listKeys({ folderId, limit: 100 });\n    const key = keys.find(k => k.name === keyName);\n    if (!key) {\n      return null;\n    }\n    return this.getKey(key.id, { includeValue });\n  }\n\n  /**\n   * Search for keys across all folders\n   * @param {Object} params\n   * @param {string} params.search - Search term\n   * @param {string} [params.type] - Filter by key type\n   * @param {boolean} [params.favorite] - Filter by favorite status\n   * @param {number} [params.limit=20] - Number of keys to return\n   * @param {number} [params.offset=0] - Number of keys to skip\n   * @returns {Promise<{ keys: Array, total: number, limit: number, offset: number }>}\n   */\n  async searchKeys({ search, type, favorite, limit = 20, offset = 0 }) {\n    const params = new URLSearchParams({\n      search: search,\n      limit: limit.toString(),\n      offset: offset.toString()\n    });\n    \n    if (type) params.append('type', type);\n    if (favorite !== undefined) params.append('favorite', favorite.toString());\n    \n    const url = `${this.apiUrl}/keys?${params.toString()}`;\n    const res = await this._fetchWithAuth(url);\n    const data = await res.json();\n    if (!res.ok) {\n      throw new Error(data.message || 'Failed to search keys');\n    }\n    return {\n      keys: data.keys || [],\n      total: data.total || 0,\n      limit: data.limit || limit,\n      offset: data.offset || offset\n    };\n  }\n\n  /**\n   * Get folder statistics\n   * @returns {Promise<Object>} - Statistics about keys and folders\n   */\n  async getStats() {\n    const url = `${this.apiUrl}/stats`;\n    const res = await this._fetchWithAuth(url);\n    const data = await res.json();\n    if (!res.ok) {\n      throw new Error(data.message || 'Failed to fetch stats');\n    }\n    return data.stats || {};\n  }\n\n  // RBAC Methods\n\n  /**\n   * Load user permissions from the server\n   * @returns {Promise<Array>} - Array of permission strings\n   */\n  async loadPermissions() {\n    try {\n      const url = `${this.apiUrl}/auth/permissions`;\n      const res = await this._fetchWithAuth(url);\n      const data = await res.json();\n      \n      if (res.ok && data.permissions) {\n        this.permissions = new Set(data.permissions);\n        return Array.from(this.permissions);\n      } else {\n        this.permissions = new Set();\n        return [];\n      }\n    } catch (error) {\n      console.warn('Failed to load permissions:', error.message);\n      this.permissions = new Set();\n      return [];\n    }\n  }\n\n  /**\n   * Check if user has a specific permission\n   * @param {string} permission - Permission to check (e.g., 'keys:read')\n   * @returns {Promise<boolean>} - True if user has permission\n   */\n  async hasPermission(permission) {\n    if (!this.permissions) {\n      await this.loadPermissions();\n    }\n    return this.permissions.has(permission) || this.permissions.has('*');\n  }\n\n  /**\n   * Check if user has any of the specified permissions\n   * @param {Array<string>} permissions - Array of permissions to check\n   * @returns {Promise<boolean>} - True if user has any of the permissions\n   */\n  async hasAnyPermission(permissions) {\n    if (!this.permissions) {\n      await this.loadPermissions();\n    }\n    return permissions.some(p => this.permissions.has(p) || this.permissions.has('*'));\n  }\n\n  /**\n   * Check if user has all of the specified permissions\n   * @param {Array<string>} permissions - Array of permissions to check\n   * @returns {Promise<boolean>} - True if user has all permissions\n   */\n  async hasAllPermissions(permissions) {\n    if (!this.permissions) {\n      await this.loadPermissions();\n    }\n    return permissions.every(p => this.permissions.has(p) || this.permissions.has('*'));\n  }\n\n  /**\n   * Get user's current permissions\n   * @returns {Promise<Array>} - Array of permission strings\n   */\n  async getPermissions() {\n    if (!this.permissions) {\n      await this.loadPermissions();\n    }\n    return Array.from(this.permissions);\n  }\n\n  /**\n   * Get user's roles\n   * @returns {Promise<Array>} - Array of role objects\n   */\n  async getRoles() {\n    const url = `${this.apiUrl}/auth/roles`;\n    const res = await this._fetchWithAuth(url);\n    const data = await res.json();\n    \n    if (!res.ok) {\n      throw new Error(data.error || 'Failed to fetch roles');\n    }\n    \n    return data.roles || [];\n  }\n\n  /**\n   * Enhanced listKeys with RBAC permission check\n   * @param {Object} params\n   * @param {string} params.folderId - Folder ID to list keys from\n   * @param {number} [params.limit=20] - Number of keys to return\n   * @param {number} [params.offset=0] - Number of keys to skip\n   * @returns {Promise<{ keys: Array, total: number, limit: number, offset: number }>}\n   */\n  async listKeys({ folderId, limit = 20, offset = 0 }) {\n    // Check permission before making request\n    if (!(await this.hasPermission('keys:read'))) {\n      throw new Error('Insufficient permissions: keys:read required');\n    }\n\n    const url = `${this.apiUrl}/keys?folderId=${encodeURIComponent(folderId)}&limit=${limit}&offset=${offset}`;\n    const res = await this._fetchWithAuth(url);\n    const data = await res.json();\n    if (!res.ok || data.success === false) {\n      throw new Error(data.error || 'Failed to list keys');\n    }\n    return {\n      keys: data.keys,\n      total: data.total,\n      limit: data.limit,\n      offset: data.offset\n    };\n  }\n\n  /**\n   * Enhanced getKey with RBAC permission check\n   * @param {string} keyId - The key's ID\n   * @param {Object} [options]\n   * @param {boolean} [options.includeValue=false] - If true, include the decrypted key value\n   * @returns {Promise<Object>} - The key object\n   */\n  async getKey(keyId, { includeValue = false } = {}) {\n    // Check permission before making request\n    if (!(await this.hasPermission('keys:read'))) {\n      throw new Error('Insufficient permissions: keys:read required');\n    }\n\n    const url = `${this.apiUrl}/keys/${encodeURIComponent(keyId)}?includeValue=${includeValue}`;\n    const res = await this._fetchWithAuth(url);\n    const data = await res.json();\n    if (!res.ok || data.success === false) {\n      throw new Error(data.error || 'Failed to fetch key');\n    }\n    return data.key;\n  }\n\n  /**\n   * Enhanced getFolder with RBAC permission check\n   * @param {string} folderId - The folder's ID\n   * @returns {Promise<Object>} - The folder object with keys and subfolders\n   */\n  async getFolder(folderId) {\n    // Check permission before making request\n    if (!(await this.hasPermission('folders:read'))) {\n      throw new Error('Insufficient permissions: folders:read required');\n    }\n\n    const url = `${this.apiUrl}/folders/${encodeURIComponent(folderId)}`;\n    const res = await this._fetchWithAuth(url);\n    const data = await res.json();\n    if (!res.ok) {\n      throw new Error(data.message || 'Failed to fetch folder');\n    }\n    return {\n      folder: data.folder,\n      keys: data.keys || []\n    };\n  }\n\n  /**\n   * Get keys by path (most user-friendly method)\n   * @param {string} path - Path like 'ProjectName/Subfolder' or 'ProjectName'\n   * @param {Object} [options]\n   * @param {string} [options.environment] - Filter by environment (DEVELOPMENT, STAGING, PRODUCTION, etc.)\n   * @param {number} [options.limit=100] - Number of keys to return\n   * @param {number} [options.offset=0] - Number of keys to skip\n   * @returns {Promise<{ keys: Array, total: number, folder: Object }>}\n   */\n  async getKeysByPath(path, options = {}) {\n    const { environment, limit = 100, offset = 0 } = options;\n    \n    try {\n      // Parse the path and find the target folder\n      const targetFolder = await this._resolvePathToFolder(path);\n      \n      if (!targetFolder) {\n        throw new Error(`Path not found: ${path}`);\n      }\n\n      // Build query parameters\n      const params = new URLSearchParams({\n        folderId: targetFolder.id,\n        limit: limit.toString(),\n        offset: offset.toString()\n      });\n      \n      if (environment) {\n        params.append('environment', environment.toUpperCase());\n      }\n\n      // Fetch keys from the resolved folder\n      const url = `${this.apiUrl}/keys?${params.toString()}`;\n      const res = await this._fetchWithAuth(url);\n      const data = await res.json();\n      \n      if (!res.ok || data.success === false) {\n        throw new Error(data.error || 'Failed to fetch keys');\n      }\n\n      return {\n        keys: data.keys || [],\n        total: data.total || 0,\n        folder: targetFolder,\n        path: path\n      };\n\n    } catch (error) {\n      throw new Error(`Failed to get keys by path '${path}': ${error.message}`);\n    }\n  }\n\n  /**\n   * Helper method to resolve a path to a folder object\n   * @param {string} path - Path like 'ProjectName/Subfolder/SubSubfolder'\n   * @returns {Promise<Object|null>} - Folder object or null if not found\n   */\n  async _resolvePathToFolder(path) {\n    if (!path || typeof path !== 'string') {\n      throw new Error('Path must be a non-empty string');\n    }\n\n    const pathParts = path.split('/').filter(part => part.trim());\n    \n    if (pathParts.length === 0) {\n      throw new Error('Invalid path format');\n    }\n\n    try {\n      // First, get all projects to find the root project\n      const { folders: projects } = await this.listProjects();\n      const rootProject = projects.find(p => \n        p.name.toLowerCase() === pathParts[0].toLowerCase()\n      );\n\n      if (!rootProject) {\n        throw new Error(`Project not found: ${pathParts[0]}`);\n      }\n\n      // If it's just a project name, return the project\n      if (pathParts.length === 1) {\n        return rootProject;\n      }\n\n      // Navigate through the path to find the target folder\n      let currentFolder = rootProject;\n      \n      for (let i = 1; i < pathParts.length; i++) {\n        const part = pathParts[i];\n        \n        // Get subfolders of current folder\n        const { folders } = await this.listFolders({ projectId: rootProject.id });\n        \n        // Find the next folder in the path\n        const nextFolder = this._findFolderInTree(folders, part);\n        \n        if (!nextFolder) {\n          throw new Error(`Subfolder not found: ${part} in path ${path}`);\n        }\n        \n        currentFolder = nextFolder;\n      }\n\n      return currentFolder;\n\n    } catch (error) {\n      throw new Error(`Path resolution failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Helper method to find a folder by name in a folder tree\n   * @param {Array} folders - Array of folders to search in\n   * @param {string} folderName - Name of the folder to find\n   * @returns {Object|null} - Found folder or null\n   */\n  _findFolderInTree(folders, folderName) {\n    for (const folder of folders) {\n      if (folder.name.toLowerCase() === folderName.toLowerCase()) {\n        return folder;\n      }\n      \n      // Search in children recursively\n      if (folder.children && folder.children.length > 0) {\n        const found = this._findFolderInTree(folder.children, folderName);\n        if (found) return found;\n      }\n    }\n    \n    return null;\n  }\n\n  /**\n   * Get keys from a project by name (convenience method)\n   * @param {string} projectName - Name of the project\n   * @param {Object} [options] - Same options as getKeysByPath\n   * @returns {Promise<{ keys: Array, total: number, folder: Object }>}\n   */\n  async getProjectKeys(projectName, options = {}) {\n    return this.getKeysByPath(projectName, options);\n  }\n\n  /**\n   * Get keys from a specific environment in a project (convenience method)\n   * @param {string} projectName - Name of the project\n   * @param {string} environment - Environment name (DEVELOPMENT, STAGING, PRODUCTION, etc.)\n   * @param {Object} [options] - Additional options\n   * @returns {Promise<{ keys: Array, total: number, folder: Object }>}\n   */\n  async getEnvironmentKeys(projectName, environment, options = {}) {\n    return this.getKeysByPath(projectName, {\n      ...options,\n      environment: environment.toUpperCase()\n    });\n  }\n} "],"names":[],"mappings":"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"}