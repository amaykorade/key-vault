generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model accounts {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  users             users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model audit_logs {
  id         String      @id @default(cuid())
  action     AuditAction
  resource   String
  resourceId String?
  details    Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime    @default(now())
  userId     String?
  users      users?      @relation(fields: [userId], references: [id])
}

model folders {
  id            String    @id @default(cuid())
  name          String
  description   String?
  color         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  userId        String
  parentId      String?
  folders       folders?  @relation("foldersTofolders", fields: [parentId], references: [id])
  other_folders folders[] @relation("foldersTofolders")
  users         users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  keys          keys[]
}

model key_accesses {
  id          String          @id @default(cuid())
  permissions KeyPermission[]
  grantedAt   DateTime        @default(now())
  grantedBy   String
  keyId       String
  teamId      String
  keys        keys            @relation(fields: [keyId], references: [id], onDelete: Cascade)
  teams       teams           @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([keyId, teamId])
}

model keys {
  id           String         @id @default(cuid())
  name         String
  description  String?
  value        String
  type         KeyType
  tags         String[]
  isFavorite   Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  userId       String
  folderId     String?
  expiresAt    DateTime?
  environment  String         @default("production")
  key_accesses key_accesses[]
  folders      folders?       @relation(fields: [folderId], references: [id])
  users        users          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model payments {
  id                    String   @id @default(cuid())
  userId                String
  orderId               String
  paymentId             String
  signature             String
  plan                  UserPlan
  amount                Int
  currency              String
  status                String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  subscriptionEndDate   DateTime
  subscriptionStartDate DateTime @default(now())
  users                 users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model refresh_tokens {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime
  revoked   Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    String
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model sessions {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  userId    String
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model team_members {
  id                String    @id @default(cuid())
  role              TeamRole  @default(MEMBER)
  joinedAt          DateTime  @default(now())
  invitedAt         DateTime  @default(now())
  invitedBy         String?
  userId            String
  teamId            String
  acceptedAt        DateTime?
  customPermissions Json?
  expiresAt         DateTime?
  roleId            String?
  roles             roles?    @relation(fields: [roleId], references: [id])
  teams             teams     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  users             users     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
}

model teams {
  id                   String                 @id @default(cuid())
  name                 String
  description          String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  ownerId              String
  access_control_lists access_control_lists[]
  key_accesses         key_accesses[]
  team_members         team_members[]
  users                users                  @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model users {
  id                    String                 @id @default(cuid())
  email                 String                 @unique
  name                  String?
  password              String
  role                  UserRole               @default(USER)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  apiToken              String?                @unique
  plan                  UserPlan               @default(FREE)
  subscriptionExpiresAt DateTime?
  failedLoginAttempts   Int                    @default(0)
  isActive              Boolean                @default(true)
  lastLoginAt           DateTime?
  lockedUntil           DateTime?
  permissions           Json?
  keyCount              Int                    @default(0)
  lastUsageUpdate       DateTime               @default(now())
  projectCount          Int                    @default(0)
  access_audit_logs     access_audit_logs[]
  access_control_lists  access_control_lists[]
  accounts              accounts[]
  api_tokens            api_tokens[]
  audit_logs            audit_logs[]
  folders               folders[]
  keys                  keys[]
  payments              payments[]
  refresh_tokens        refresh_tokens[]
  sessions              sessions[]
  team_members          team_members[]
  teams                 teams[]
}

model verification_tokens {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model permissions {
  id              String             @id @default(cuid())
  name            String             @unique
  description     String
  category        String
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  rolePermissions role_permissions[]
}

model roles {
  id                   String                 @id @default(cuid())
  name                 String                 @unique
  description          String
  isSystem             Boolean                @default(false)
  isActive             Boolean                @default(true)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  access_control_lists access_control_lists[]
  rolePermissions      role_permissions[]
  teamMembers          team_members[]
}

model role_permissions {
  id           String      @id @default(cuid())
  roleId       String
  permissionId String
  grantedAt    DateTime    @default(now())
  grantedBy    String
  permission   permissions @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         roles       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
}

model access_control_lists {
  id           String    @id @default(cuid())
  resourceType String
  resourceId   String
  userId       String?
  teamId       String?
  roleId       String?
  permissions  String[]
  grantedAt    DateTime  @default(now())
  grantedBy    String
  expiresAt    DateTime?
  role         roles?    @relation(fields: [roleId], references: [id], onDelete: Cascade)
  team         teams?    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user         users?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([resourceType, resourceId, userId, teamId, roleId])
}

model access_audit_logs {
  id           String   @id @default(cuid())
  userId       String?
  action       String
  resourceType String
  resourceId   String?
  permissions  String[]
  result       String
  ipAddress    String?
  userAgent    String?
  metadata     Json?
  createdAt    DateTime @default(now())
  user         users?   @relation(fields: [userId], references: [id])
}

model api_tokens {
  id          String    @id @default(cuid())
  token       String    @unique
  userId      String
  name        String?
  permissions String[]
  isActive    Boolean   @default(true)
  expiresAt   DateTime?
  lastUsedAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        users     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model plan_limits {
  id                 String   @id @default(cuid())
  plan               UserPlan @unique
  maxProjects        Int      @default(1)
  maxKeysPerProject  Int      @default(5)
  maxKeysTotal       Int      @default(5)
  hasTeamFeatures    Boolean  @default(false)
  hasRBAC            Boolean  @default(false)
  hasExpiringSecrets Boolean  @default(false)
  hasAPIAnalytics    Boolean  @default(false)
  hasEmailSupport    Boolean  @default(false)
  hasPrioritySupport Boolean  @default(false)
  price              Int      @default(0)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

enum UserRole {
  ADMIN
  USER
}

enum TeamRole {
  OWNER
  ADMIN
  MEMBER
}

enum KeyPermission {
  READ
  WRITE
  DELETE
}

enum KeyType {
  PASSWORD
  API_KEY
  SSH_KEY
  CERTIFICATE
  SECRET
  OTHER
}

enum Environment {
  DEVELOPMENT
  STAGING
  TESTING
  PRODUCTION
  LOCAL
  OTHER
}

enum AuditAction {
  CREATE
  READ
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  EXPORT
  IMPORT
  SHARE
  REVOKE
}

enum UserPlan {
  FREE
  PRO
  TEAM
}
