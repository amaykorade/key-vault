generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model accounts {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  users             users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model audit_logs {
  id         String      @id @default(cuid())
  action     AuditAction
  resource   String
  resourceId String?
  details    Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime    @default(now())
  userId     String?
  users      users?      @relation(fields: [userId], references: [id])
}

model folders {
  id            String    @id @default(cuid())
  name          String
  description   String?
  color         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  userId        String
  parentId      String?
  folders       folders?  @relation("foldersTofolders", fields: [parentId], references: [id])
  other_folders folders[] @relation("foldersTofolders")
  users         users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  keys          keys[]
}

model key_accesses {
  id          String          @id @default(cuid())
  permissions KeyPermission[]
  grantedAt   DateTime        @default(now())
  grantedBy   String
  keyId       String
  teamId      String
  keys        keys            @relation(fields: [keyId], references: [id], onDelete: Cascade)
  teams       teams           @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([keyId, teamId])
}

model keys {
  id           String         @id @default(cuid())
  name         String
  description  String?
  value        String
  type         KeyType
  tags         String[]
  isFavorite   Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  userId       String
  folderId     String?
  key_accesses key_accesses[]
  folders      folders?       @relation(fields: [folderId], references: [id])
  users        users          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model payments {
  id                    String   @id @default(cuid())
  userId                String
  orderId               String
  paymentId             String
  signature             String
  plan                  UserPlan
  amount                Int
  currency              String
  status                String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  subscriptionEndDate   DateTime
  subscriptionStartDate DateTime @default(now())
  users                 users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model refresh_tokens {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime
  revoked   Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    String
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model sessions {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  userId    String
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model team_members {
  id        String   @id @default(cuid())
  role      TeamRole @default(MEMBER)
  joinedAt  DateTime @default(now())
  invitedAt DateTime @default(now())
  invitedBy String?
  userId    String
  teamId    String
  teams     teams    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
}

model teams {
  id           String         @id @default(cuid())
  name         String
  description  String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  ownerId      String
  key_accesses key_accesses[]
  team_members team_members[]
  users        users          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model users {
  id                    String           @id @default(cuid())
  email                 String           @unique
  name                  String?
  password              String
  role                  UserRole         @default(USER)
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  apiToken              String?          @unique
  plan                  UserPlan         @default(FREE)
  subscriptionExpiresAt DateTime?
  accounts              accounts[]
  audit_logs            audit_logs[]
  folders               folders[]
  keys                  keys[]
  payments              payments[]
  refresh_tokens        refresh_tokens[]
  sessions              sessions[]
  team_members          team_members[]
  teams                 teams[]
}

model verification_tokens {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  ADMIN
  USER
}

enum TeamRole {
  OWNER
  ADMIN
  MEMBER
}

enum KeyPermission {
  READ
  WRITE
  DELETE
}

enum KeyType {
  PASSWORD
  API_KEY
  SSH_KEY
  CERTIFICATE
  SECRET
  OTHER
}

enum AuditAction {
  CREATE
  READ
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  EXPORT
  IMPORT
  SHARE
  REVOKE
}

enum UserPlan {
  FREE
  PRO
  TEAM
}
